{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.7.4-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python37464bitvenvdatavenv48f885b8ff2f4a47834469d53ae88269",
   "display_name": "Python 3.7.4 64-bit ('venv-Data': venv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "input: str1, str2\n",
    "returns: int = total characters that must be deleted to make strings anagrams\n",
    "'''\n",
    "\n",
    "def makeAnagram(a, b):\n",
    "    for i in range(len(a)):\n",
    "        frequency += a[i]\n",
    "    # str1 = set(str1)\n",
    "    # str2 = set(str2)\n",
    "    # delete = len(str1) - len(str1.intersection(str2))\n",
    "    # delete += len(str2)- len(str2.intersection(str1))\n",
    "    return delete"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "5"
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a, b = 'abcde', 'abcf'\n",
    "makeAnagram(str1, str2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "array = np.zeros(26)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "array([1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0.])"
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unexpected EOF while parsing (<ipython-input-53-f61a4c59938a>, line 8)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-53-f61a4c59938a>\"\u001b[0;36m, line \u001b[0;32m8\u001b[0m\n\u001b[0;31m    for i in array:\u001b[0m\n\u001b[0m                   ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unexpected EOF while parsing\n"
     ]
    }
   ],
   "source": [
    "for c in a:\n",
    "    idx = ord(c) - ord('a')\n",
    "    array[idx] += 1\n",
    "for c in b:\n",
    "    idx = ord(c) - ord('a')\n",
    "    array[idx] -= 1\n",
    "result = 0\n",
    "for i in array:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "def makeAnagrams(a,b):\n",
    "    from collections import Counter\n",
    "\n",
    "    counts = Counter(b)\n",
    "    for c in a:\n",
    "        counts[c] -= 1\n",
    "    for k,v in counts.items():\n",
    "        if v > 0:\n",
    "            a += k\n",
    "        if v < 0:\n",
    "            b += k\n",
    "    assert set(a).intersection(set(b)) == set(a)\n",
    "    return sum(abs(v) for v in counts.values())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "3"
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "makeAnagrams(a,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "import ipytest\n",
    "\n",
    "import ipytest.magics\n",
    "ipytest.config(rewrite_asserts = True, magics=True)\n",
    "__file__ = \"strings.ipynb\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": "UsageError: Cell magic `%%run_pytest` not found.\n"
    }
   ],
   "source": [
    "%%run_pytest -qq\n",
    "\n",
    "@pytest.mark.parametrize(\"a,b,expected\", [\n",
    "    (\"cde\", \"abc\", 4)\n",
    "])\n",
    "def test_anagrams(a,b,expected):\n",
    "    assert makeAnagrams(a,b) == expected"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'ipytest' has no attribute 'run'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32mstrings.ipynb\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mipytest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'-v'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m: module 'ipytest' has no attribute 'run'"
     ]
    }
   ],
   "source": [
    "ipytest.run('-v')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}